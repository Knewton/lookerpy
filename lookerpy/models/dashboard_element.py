# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DashboardElement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DashboardElement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'dashboard_id': 'str',
            'look_id': 'int',
            'type': 'str',
            'listen': 'str',
            'refresh_interval': 'str',
            'refresh_interval_to_i': 'int',
            'note_text': 'str',
            'note_text_as_html': 'str',
            'note_display': 'str',
            'note_state': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'dashboard_id': 'dashboard_id',
            'look_id': 'look_id',
            'type': 'type',
            'listen': 'listen',
            'refresh_interval': 'refresh_interval',
            'refresh_interval_to_i': 'refresh_interval_to_i',
            'note_text': 'note_text',
            'note_text_as_html': 'note_text_as_html',
            'note_display': 'note_display',
            'note_state': 'note_state'
        }

        self._id = None
        self._dashboard_id = None
        self._look_id = None
        self._type = None
        self._listen = None
        self._refresh_interval = None
        self._refresh_interval_to_i = None
        self._note_text = None
        self._note_text_as_html = None
        self._note_display = None
        self._note_state = None

    @property
    def id(self):
        """
        Gets the id of this DashboardElement.
        Unique Id

        :return: The id of this DashboardElement.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DashboardElement.
        Unique Id

        :param id: The id of this DashboardElement.
        :type: int
        """
        
        self._id = id

    @property
    def dashboard_id(self):
        """
        Gets the dashboard_id of this DashboardElement.
        Id of Dashboard

        :return: The dashboard_id of this DashboardElement.
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """
        Sets the dashboard_id of this DashboardElement.
        Id of Dashboard

        :param dashboard_id: The dashboard_id of this DashboardElement.
        :type: str
        """
        
        self._dashboard_id = dashboard_id

    @property
    def look_id(self):
        """
        Gets the look_id of this DashboardElement.
        Id Of Look

        :return: The look_id of this DashboardElement.
        :rtype: int
        """
        return self._look_id

    @look_id.setter
    def look_id(self, look_id):
        """
        Sets the look_id of this DashboardElement.
        Id Of Look

        :param look_id: The look_id of this DashboardElement.
        :type: int
        """
        
        self._look_id = look_id

    @property
    def type(self):
        """
        Gets the type of this DashboardElement.
        Type

        :return: The type of this DashboardElement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DashboardElement.
        Type

        :param type: The type of this DashboardElement.
        :type: str
        """
        
        self._type = type

    @property
    def listen(self):
        """
        Gets the listen of this DashboardElement.
        Listen

        :return: The listen of this DashboardElement.
        :rtype: str
        """
        return self._listen

    @listen.setter
    def listen(self, listen):
        """
        Sets the listen of this DashboardElement.
        Listen

        :param listen: The listen of this DashboardElement.
        :type: str
        """
        
        self._listen = listen

    @property
    def refresh_interval(self):
        """
        Gets the refresh_interval of this DashboardElement.
        Refresh Interval

        :return: The refresh_interval of this DashboardElement.
        :rtype: str
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """
        Sets the refresh_interval of this DashboardElement.
        Refresh Interval

        :param refresh_interval: The refresh_interval of this DashboardElement.
        :type: str
        """
        
        self._refresh_interval = refresh_interval

    @property
    def refresh_interval_to_i(self):
        """
        Gets the refresh_interval_to_i of this DashboardElement.
        Refresh Interval as integer

        :return: The refresh_interval_to_i of this DashboardElement.
        :rtype: int
        """
        return self._refresh_interval_to_i

    @refresh_interval_to_i.setter
    def refresh_interval_to_i(self, refresh_interval_to_i):
        """
        Sets the refresh_interval_to_i of this DashboardElement.
        Refresh Interval as integer

        :param refresh_interval_to_i: The refresh_interval_to_i of this DashboardElement.
        :type: int
        """
        
        self._refresh_interval_to_i = refresh_interval_to_i

    @property
    def note_text(self):
        """
        Gets the note_text of this DashboardElement.
        Note Text

        :return: The note_text of this DashboardElement.
        :rtype: str
        """
        return self._note_text

    @note_text.setter
    def note_text(self, note_text):
        """
        Sets the note_text of this DashboardElement.
        Note Text

        :param note_text: The note_text of this DashboardElement.
        :type: str
        """
        
        self._note_text = note_text

    @property
    def note_text_as_html(self):
        """
        Gets the note_text_as_html of this DashboardElement.
        Note Text as Html

        :return: The note_text_as_html of this DashboardElement.
        :rtype: str
        """
        return self._note_text_as_html

    @note_text_as_html.setter
    def note_text_as_html(self, note_text_as_html):
        """
        Sets the note_text_as_html of this DashboardElement.
        Note Text as Html

        :param note_text_as_html: The note_text_as_html of this DashboardElement.
        :type: str
        """
        
        self._note_text_as_html = note_text_as_html

    @property
    def note_display(self):
        """
        Gets the note_display of this DashboardElement.
        Note Display

        :return: The note_display of this DashboardElement.
        :rtype: str
        """
        return self._note_display

    @note_display.setter
    def note_display(self, note_display):
        """
        Sets the note_display of this DashboardElement.
        Note Display

        :param note_display: The note_display of this DashboardElement.
        :type: str
        """
        
        self._note_display = note_display

    @property
    def note_state(self):
        """
        Gets the note_state of this DashboardElement.
        Note State

        :return: The note_state of this DashboardElement.
        :rtype: str
        """
        return self._note_state

    @note_state.setter
    def note_state(self, note_state):
        """
        Sets the note_state of this DashboardElement.
        Note State

        :param note_state: The note_state of this DashboardElement.
        :type: str
        """
        
        self._note_state = note_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

