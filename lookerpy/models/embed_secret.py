# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class EmbedSecret(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EmbedSecret - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'user_id': 'int',
            'created_at': 'str',
            'secret': 'str',
            'algorithm': 'str',
            'enabled': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'created_at': 'created_at',
            'secret': 'secret',
            'algorithm': 'algorithm',
            'enabled': 'enabled'
        }

        self._id = None
        self._user_id = None
        self._created_at = None
        self._secret = None
        self._algorithm = None
        self._enabled = None

    @property
    def id(self):
        """
        Gets the id of this EmbedSecret.
        Unique Id

        :return: The id of this EmbedSecret.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EmbedSecret.
        Unique Id

        :param id: The id of this EmbedSecret.
        :type: int
        """
        
        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this EmbedSecret.
        Id of user who created this secret

        :return: The user_id of this EmbedSecret.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this EmbedSecret.
        Id of user who created this secret

        :param user_id: The user_id of this EmbedSecret.
        :type: int
        """
        
        self._user_id = user_id

    @property
    def created_at(self):
        """
        Gets the created_at of this EmbedSecret.
        When secret was created

        :return: The created_at of this EmbedSecret.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this EmbedSecret.
        When secret was created

        :param created_at: The created_at of this EmbedSecret.
        :type: str
        """
        
        self._created_at = created_at

    @property
    def secret(self):
        """
        Gets the secret of this EmbedSecret.
        Secret for use with SSO embedding

        :return: The secret of this EmbedSecret.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """
        Sets the secret of this EmbedSecret.
        Secret for use with SSO embedding

        :param secret: The secret of this EmbedSecret.
        :type: str
        """
        
        self._secret = secret

    @property
    def algorithm(self):
        """
        Gets the algorithm of this EmbedSecret.
        Signing algorithm to use with this secret

        :return: The algorithm of this EmbedSecret.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """
        Sets the algorithm of this EmbedSecret.
        Signing algorithm to use with this secret

        :param algorithm: The algorithm of this EmbedSecret.
        :type: str
        """
        
        self._algorithm = algorithm

    @property
    def enabled(self):
        """
        Gets the enabled of this EmbedSecret.
        Is this secret currently enabled

        :return: The enabled of this EmbedSecret.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this EmbedSecret.
        Is this secret currently enabled

        :param enabled: The enabled of this EmbedSecret.
        :type: bool
        """
        
        self._enabled = enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

