# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class UploadTable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UploadTable - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'db_connection_id': 'int',
            'db_connection_name': 'str',
            'table_name': 'str',
            'view_name': 'str',
            'file_type': 'str',
            'definition': 'dict(str, str)',
            'created_at': 'str',
            'built_at': 'str',
            'created_at_relative': 'str',
            'built_at_relative': 'str',
            'url': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'db_connection_id': 'db_connection_id',
            'db_connection_name': 'db_connection_name',
            'table_name': 'table_name',
            'view_name': 'view_name',
            'file_type': 'file_type',
            'definition': 'definition',
            'created_at': 'created_at',
            'built_at': 'built_at',
            'created_at_relative': 'created_at_relative',
            'built_at_relative': 'built_at_relative',
            'url': 'url'
        }

        self._id = None
        self._db_connection_id = None
        self._db_connection_name = None
        self._table_name = None
        self._view_name = None
        self._file_type = None
        self._definition = None
        self._created_at = None
        self._built_at = None
        self._created_at_relative = None
        self._built_at_relative = None
        self._url = None

    @property
    def id(self):
        """
        Gets the id of this UploadTable.
        Unique Id

        :return: The id of this UploadTable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UploadTable.
        Unique Id

        :param id: The id of this UploadTable.
        :type: int
        """
        
        self._id = id

    @property
    def db_connection_id(self):
        """
        Gets the db_connection_id of this UploadTable.
        Id of the DB Connection

        :return: The db_connection_id of this UploadTable.
        :rtype: int
        """
        return self._db_connection_id

    @db_connection_id.setter
    def db_connection_id(self, db_connection_id):
        """
        Sets the db_connection_id of this UploadTable.
        Id of the DB Connection

        :param db_connection_id: The db_connection_id of this UploadTable.
        :type: int
        """
        
        self._db_connection_id = db_connection_id

    @property
    def db_connection_name(self):
        """
        Gets the db_connection_name of this UploadTable.
        Name of the DB Connection

        :return: The db_connection_name of this UploadTable.
        :rtype: str
        """
        return self._db_connection_name

    @db_connection_name.setter
    def db_connection_name(self, db_connection_name):
        """
        Sets the db_connection_name of this UploadTable.
        Name of the DB Connection

        :param db_connection_name: The db_connection_name of this UploadTable.
        :type: str
        """
        
        self._db_connection_name = db_connection_name

    @property
    def table_name(self):
        """
        Gets the table_name of this UploadTable.
        What the table will be named

        :return: The table_name of this UploadTable.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this UploadTable.
        What the table will be named

        :param table_name: The table_name of this UploadTable.
        :type: str
        """
        
        self._table_name = table_name

    @property
    def view_name(self):
        """
        Gets the view_name of this UploadTable.
        What to name the new table

        :return: The view_name of this UploadTable.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this UploadTable.
        What to name the new table

        :param view_name: The view_name of this UploadTable.
        :type: str
        """
        
        self._view_name = view_name

    @property
    def file_type(self):
        """
        Gets the file_type of this UploadTable.
        Type of the uploaded file

        :return: The file_type of this UploadTable.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """
        Sets the file_type of this UploadTable.
        Type of the uploaded file

        :param file_type: The file_type of this UploadTable.
        :type: str
        """
        
        self._file_type = file_type

    @property
    def definition(self):
        """
        Gets the definition of this UploadTable.
        Definition of the table and uploaded file

        :return: The definition of this UploadTable.
        :rtype: dict(str, str)
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """
        Sets the definition of this UploadTable.
        Definition of the table and uploaded file

        :param definition: The definition of this UploadTable.
        :type: dict(str, str)
        """
        
        self._definition = definition

    @property
    def created_at(self):
        """
        Gets the created_at of this UploadTable.
        Date/Time this record was created

        :return: The created_at of this UploadTable.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this UploadTable.
        Date/Time this record was created

        :param created_at: The created_at of this UploadTable.
        :type: str
        """
        
        self._created_at = created_at

    @property
    def built_at(self):
        """
        Gets the built_at of this UploadTable.
        Relative time in English the table was built for this upload

        :return: The built_at of this UploadTable.
        :rtype: str
        """
        return self._built_at

    @built_at.setter
    def built_at(self, built_at):
        """
        Sets the built_at of this UploadTable.
        Relative time in English the table was built for this upload

        :param built_at: The built_at of this UploadTable.
        :type: str
        """
        
        self._built_at = built_at

    @property
    def created_at_relative(self):
        """
        Gets the created_at_relative of this UploadTable.
        Date/Time this record was created

        :return: The created_at_relative of this UploadTable.
        :rtype: str
        """
        return self._created_at_relative

    @created_at_relative.setter
    def created_at_relative(self, created_at_relative):
        """
        Sets the created_at_relative of this UploadTable.
        Date/Time this record was created

        :param created_at_relative: The created_at_relative of this UploadTable.
        :type: str
        """
        
        self._created_at_relative = created_at_relative

    @property
    def built_at_relative(self):
        """
        Gets the built_at_relative of this UploadTable.
        Relative time in English the table was built for this upload

        :return: The built_at_relative of this UploadTable.
        :rtype: str
        """
        return self._built_at_relative

    @built_at_relative.setter
    def built_at_relative(self, built_at_relative):
        """
        Sets the built_at_relative of this UploadTable.
        Relative time in English the table was built for this upload

        :param built_at_relative: The built_at_relative of this UploadTable.
        :type: str
        """
        
        self._built_at_relative = built_at_relative

    @property
    def url(self):
        """
        Gets the url of this UploadTable.
        Link to get this item

        :return: The url of this UploadTable.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this UploadTable.
        Link to get this item

        :param url: The url of this UploadTable.
        :type: str
        """
        
        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

