# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class DashboardFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DashboardFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'title': 'str',
            'type': 'str',
            'default_value': 'str',
            'model': 'str',
            'explore': 'str',
            'dimension': 'str',
            'field': 'str',
            'listens_to_filters': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'title': 'title',
            'type': 'type',
            'default_value': 'default_value',
            'model': 'model',
            'explore': 'explore',
            'dimension': 'dimension',
            'field': 'field',
            'listens_to_filters': 'listens_to_filters'
        }

        self._id = None
        self._name = None
        self._title = None
        self._type = None
        self._default_value = None
        self._model = None
        self._explore = None
        self._dimension = None
        self._field = None
        self._listens_to_filters = None

    @property
    def id(self):
        """
        Gets the id of this DashboardFilter.
        Unique Id

        :return: The id of this DashboardFilter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DashboardFilter.
        Unique Id

        :param id: The id of this DashboardFilter.
        :type: int
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DashboardFilter.
        Name of filter

        :return: The name of this DashboardFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DashboardFilter.
        Name of filter

        :param name: The name of this DashboardFilter.
        :type: str
        """
        
        self._name = name

    @property
    def title(self):
        """
        Gets the title of this DashboardFilter.
        Name of title

        :return: The title of this DashboardFilter.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this DashboardFilter.
        Name of title

        :param title: The title of this DashboardFilter.
        :type: str
        """
        
        self._title = title

    @property
    def type(self):
        """
        Gets the type of this DashboardFilter.
        Type of filter: one of date, number, string, or field

        :return: The type of this DashboardFilter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DashboardFilter.
        Type of filter: one of date, number, string, or field

        :param type: The type of this DashboardFilter.
        :type: str
        """
        
        self._type = type

    @property
    def default_value(self):
        """
        Gets the default_value of this DashboardFilter.
        Default value of filter

        :return: The default_value of this DashboardFilter.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this DashboardFilter.
        Default value of filter

        :param default_value: The default_value of this DashboardFilter.
        :type: str
        """
        
        self._default_value = default_value

    @property
    def model(self):
        """
        Gets the model of this DashboardFilter.
        Model of filter (required if type = field)

        :return: The model of this DashboardFilter.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this DashboardFilter.
        Model of filter (required if type = field)

        :param model: The model of this DashboardFilter.
        :type: str
        """
        
        self._model = model

    @property
    def explore(self):
        """
        Gets the explore of this DashboardFilter.
        Explore of filter (required if type = field)

        :return: The explore of this DashboardFilter.
        :rtype: str
        """
        return self._explore

    @explore.setter
    def explore(self, explore):
        """
        Sets the explore of this DashboardFilter.
        Explore of filter (required if type = field)

        :param explore: The explore of this DashboardFilter.
        :type: str
        """
        
        self._explore = explore

    @property
    def dimension(self):
        """
        Gets the dimension of this DashboardFilter.
        Dimension of filter (required if type = field)

        :return: The dimension of this DashboardFilter.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """
        Sets the dimension of this DashboardFilter.
        Dimension of filter (required if type = field)

        :param dimension: The dimension of this DashboardFilter.
        :type: str
        """
        
        self._dimension = dimension

    @property
    def field(self):
        """
        Gets the field of this DashboardFilter.
        Field information

        :return: The field of this DashboardFilter.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this DashboardFilter.
        Field information

        :param field: The field of this DashboardFilter.
        :type: str
        """
        
        self._field = field

    @property
    def listens_to_filters(self):
        """
        Gets the listens_to_filters of this DashboardFilter.
        Array of listeners for faceted filters

        :return: The listens_to_filters of this DashboardFilter.
        :rtype: list[str]
        """
        return self._listens_to_filters

    @listens_to_filters.setter
    def listens_to_filters(self, listens_to_filters):
        """
        Sets the listens_to_filters of this DashboardFilter.
        Array of listeners for faceted filters

        :param listens_to_filters: The listens_to_filters of this DashboardFilter.
        :type: list[str]
        """
        
        self._listens_to_filters = listens_to_filters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

