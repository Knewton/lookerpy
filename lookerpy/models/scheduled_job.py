# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ScheduledJob(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ScheduledJob - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'status': 'str',
            'status_detail': 'str',
            'scheduled_job_stage': 'list[ScheduledJobStage]',
            'row_limit_reached': 'str',
            'created_at': 'datetime',
            'finalized_at': 'datetime',
            'user': 'UserPublic',
            'look_id': 'int',
            'dashboard_id': 'int',
            'lookml_dashboard_id': 'str',
            'require_results': 'bool',
            'require_no_results': 'bool',
            'require_change': 'bool',
            'crontab': 'str',
            'timezone': 'str',
            'data_slug': 'str',
            'data_signature': 'str',
            'name': 'str',
            'title': 'str',
            'scheduled_job_destination': 'list[ScheduledJobDestination]',
            'scheduled_plan': 'ScheduledPlan',
            'runtime': 'int',
            'looker_url': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'status_detail': 'status_detail',
            'scheduled_job_stage': 'scheduled_job_stage',
            'row_limit_reached': 'row_limit_reached',
            'created_at': 'created_at',
            'finalized_at': 'finalized_at',
            'user': 'user',
            'look_id': 'look_id',
            'dashboard_id': 'dashboard_id',
            'lookml_dashboard_id': 'lookml_dashboard_id',
            'require_results': 'require_results',
            'require_no_results': 'require_no_results',
            'require_change': 'require_change',
            'crontab': 'crontab',
            'timezone': 'timezone',
            'data_slug': 'data_slug',
            'data_signature': 'data_signature',
            'name': 'name',
            'title': 'title',
            'scheduled_job_destination': 'scheduled_job_destination',
            'scheduled_plan': 'scheduled_plan',
            'runtime': 'runtime',
            'looker_url': 'looker_url'
        }

        self._id = None
        self._status = None
        self._status_detail = None
        self._scheduled_job_stage = None
        self._row_limit_reached = None
        self._created_at = None
        self._finalized_at = None
        self._user = None
        self._look_id = None
        self._dashboard_id = None
        self._lookml_dashboard_id = None
        self._require_results = None
        self._require_no_results = None
        self._require_change = None
        self._crontab = None
        self._timezone = None
        self._data_slug = None
        self._data_signature = None
        self._name = None
        self._title = None
        self._scheduled_job_destination = None
        self._scheduled_plan = None
        self._runtime = None
        self._looker_url = None

    @property
    def id(self):
        """
        Gets the id of this ScheduledJob.
        Unique Id

        :return: The id of this ScheduledJob.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ScheduledJob.
        Unique Id

        :param id: The id of this ScheduledJob.
        :type: int
        """
        
        self._id = id

    @property
    def status(self):
        """
        Gets the status of this ScheduledJob.
        Status of the job

        :return: The status of this ScheduledJob.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ScheduledJob.
        Status of the job

        :param status: The status of this ScheduledJob.
        :type: str
        """
        
        self._status = status

    @property
    def status_detail(self):
        """
        Gets the status_detail of this ScheduledJob.
        Optional message describing status of the job

        :return: The status_detail of this ScheduledJob.
        :rtype: str
        """
        return self._status_detail

    @status_detail.setter
    def status_detail(self, status_detail):
        """
        Sets the status_detail of this ScheduledJob.
        Optional message describing status of the job

        :param status_detail: The status_detail of this ScheduledJob.
        :type: str
        """
        
        self._status_detail = status_detail

    @property
    def scheduled_job_stage(self):
        """
        Gets the scheduled_job_stage of this ScheduledJob.
        Detailed information about the job stage

        :return: The scheduled_job_stage of this ScheduledJob.
        :rtype: list[ScheduledJobStage]
        """
        return self._scheduled_job_stage

    @scheduled_job_stage.setter
    def scheduled_job_stage(self, scheduled_job_stage):
        """
        Sets the scheduled_job_stage of this ScheduledJob.
        Detailed information about the job stage

        :param scheduled_job_stage: The scheduled_job_stage of this ScheduledJob.
        :type: list[ScheduledJobStage]
        """
        
        self._scheduled_job_stage = scheduled_job_stage

    @property
    def row_limit_reached(self):
        """
        Gets the row_limit_reached of this ScheduledJob.
        Whether the row limit was reached when running

        :return: The row_limit_reached of this ScheduledJob.
        :rtype: str
        """
        return self._row_limit_reached

    @row_limit_reached.setter
    def row_limit_reached(self, row_limit_reached):
        """
        Sets the row_limit_reached of this ScheduledJob.
        Whether the row limit was reached when running

        :param row_limit_reached: The row_limit_reached of this ScheduledJob.
        :type: str
        """
        
        self._row_limit_reached = row_limit_reached

    @property
    def created_at(self):
        """
        Gets the created_at of this ScheduledJob.
        When the ScheduledJob started

        :return: The created_at of this ScheduledJob.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ScheduledJob.
        When the ScheduledJob started

        :param created_at: The created_at of this ScheduledJob.
        :type: datetime
        """
        
        self._created_at = created_at

    @property
    def finalized_at(self):
        """
        Gets the finalized_at of this ScheduledJob.
        When the ScheduledJob finished

        :return: The finalized_at of this ScheduledJob.
        :rtype: datetime
        """
        return self._finalized_at

    @finalized_at.setter
    def finalized_at(self, finalized_at):
        """
        Sets the finalized_at of this ScheduledJob.
        When the ScheduledJob finished

        :param finalized_at: The finalized_at of this ScheduledJob.
        :type: datetime
        """
        
        self._finalized_at = finalized_at

    @property
    def user(self):
        """
        Gets the user of this ScheduledJob.
        User who owns this ScheduledPlan

        :return: The user of this ScheduledJob.
        :rtype: UserPublic
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ScheduledJob.
        User who owns this ScheduledPlan

        :param user: The user of this ScheduledJob.
        :type: UserPublic
        """
        
        self._user = user

    @property
    def look_id(self):
        """
        Gets the look_id of this ScheduledJob.
        Id of a look

        :return: The look_id of this ScheduledJob.
        :rtype: int
        """
        return self._look_id

    @look_id.setter
    def look_id(self, look_id):
        """
        Sets the look_id of this ScheduledJob.
        Id of a look

        :param look_id: The look_id of this ScheduledJob.
        :type: int
        """
        
        self._look_id = look_id

    @property
    def dashboard_id(self):
        """
        Gets the dashboard_id of this ScheduledJob.
        Id of a dashboard

        :return: The dashboard_id of this ScheduledJob.
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """
        Sets the dashboard_id of this ScheduledJob.
        Id of a dashboard

        :param dashboard_id: The dashboard_id of this ScheduledJob.
        :type: int
        """
        
        self._dashboard_id = dashboard_id

    @property
    def lookml_dashboard_id(self):
        """
        Gets the lookml_dashboard_id of this ScheduledJob.
        Id of a LookML dashboard

        :return: The lookml_dashboard_id of this ScheduledJob.
        :rtype: str
        """
        return self._lookml_dashboard_id

    @lookml_dashboard_id.setter
    def lookml_dashboard_id(self, lookml_dashboard_id):
        """
        Sets the lookml_dashboard_id of this ScheduledJob.
        Id of a LookML dashboard

        :param lookml_dashboard_id: The lookml_dashboard_id of this ScheduledJob.
        :type: str
        """
        
        self._lookml_dashboard_id = lookml_dashboard_id

    @property
    def require_results(self):
        """
        Gets the require_results of this ScheduledJob.
        Delivery should occur if running the dashboard or look returns results

        :return: The require_results of this ScheduledJob.
        :rtype: bool
        """
        return self._require_results

    @require_results.setter
    def require_results(self, require_results):
        """
        Sets the require_results of this ScheduledJob.
        Delivery should occur if running the dashboard or look returns results

        :param require_results: The require_results of this ScheduledJob.
        :type: bool
        """
        
        self._require_results = require_results

    @property
    def require_no_results(self):
        """
        Gets the require_no_results of this ScheduledJob.
        Delivery should occur if the dashboard look does not return results

        :return: The require_no_results of this ScheduledJob.
        :rtype: bool
        """
        return self._require_no_results

    @require_no_results.setter
    def require_no_results(self, require_no_results):
        """
        Sets the require_no_results of this ScheduledJob.
        Delivery should occur if the dashboard look does not return results

        :param require_no_results: The require_no_results of this ScheduledJob.
        :type: bool
        """
        
        self._require_no_results = require_no_results

    @property
    def require_change(self):
        """
        Gets the require_change of this ScheduledJob.
        Delivery should occur if data have changed since the last run

        :return: The require_change of this ScheduledJob.
        :rtype: bool
        """
        return self._require_change

    @require_change.setter
    def require_change(self, require_change):
        """
        Sets the require_change of this ScheduledJob.
        Delivery should occur if data have changed since the last run

        :param require_change: The require_change of this ScheduledJob.
        :type: bool
        """
        
        self._require_change = require_change

    @property
    def crontab(self):
        """
        Gets the crontab of this ScheduledJob.
        Vixie-Style crontab specification when to run

        :return: The crontab of this ScheduledJob.
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """
        Sets the crontab of this ScheduledJob.
        Vixie-Style crontab specification when to run

        :param crontab: The crontab of this ScheduledJob.
        :type: str
        """
        
        self._crontab = crontab

    @property
    def timezone(self):
        """
        Gets the timezone of this ScheduledJob.
        Timezone for interpreting the specified crontab (default is Looker instance timezone)

        :return: The timezone of this ScheduledJob.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this ScheduledJob.
        Timezone for interpreting the specified crontab (default is Looker instance timezone)

        :param timezone: The timezone of this ScheduledJob.
        :type: str
        """
        
        self._timezone = timezone

    @property
    def data_slug(self):
        """
        Gets the data_slug of this ScheduledJob.
        Used for caching

        :return: The data_slug of this ScheduledJob.
        :rtype: str
        """
        return self._data_slug

    @data_slug.setter
    def data_slug(self, data_slug):
        """
        Sets the data_slug of this ScheduledJob.
        Used for caching

        :param data_slug: The data_slug of this ScheduledJob.
        :type: str
        """
        
        self._data_slug = data_slug

    @property
    def data_signature(self):
        """
        Gets the data_signature of this ScheduledJob.
        Used for caching

        :return: The data_signature of this ScheduledJob.
        :rtype: str
        """
        return self._data_signature

    @data_signature.setter
    def data_signature(self, data_signature):
        """
        Sets the data_signature of this ScheduledJob.
        Used for caching

        :param data_signature: The data_signature of this ScheduledJob.
        :type: str
        """
        
        self._data_signature = data_signature

    @property
    def name(self):
        """
        Gets the name of this ScheduledJob.
        Name

        :return: The name of this ScheduledJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ScheduledJob.
        Name

        :param name: The name of this ScheduledJob.
        :type: str
        """
        
        self._name = name

    @property
    def title(self):
        """
        Gets the title of this ScheduledJob.
        Title

        :return: The title of this ScheduledJob.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ScheduledJob.
        Title

        :param title: The title of this ScheduledJob.
        :type: str
        """
        
        self._title = title

    @property
    def scheduled_job_destination(self):
        """
        Gets the scheduled_job_destination of this ScheduledJob.
        Scheduled job destinations

        :return: The scheduled_job_destination of this ScheduledJob.
        :rtype: list[ScheduledJobDestination]
        """
        return self._scheduled_job_destination

    @scheduled_job_destination.setter
    def scheduled_job_destination(self, scheduled_job_destination):
        """
        Sets the scheduled_job_destination of this ScheduledJob.
        Scheduled job destinations

        :param scheduled_job_destination: The scheduled_job_destination of this ScheduledJob.
        :type: list[ScheduledJobDestination]
        """
        
        self._scheduled_job_destination = scheduled_job_destination

    @property
    def scheduled_plan(self):
        """
        Gets the scheduled_plan of this ScheduledJob.
        ScheduledPlan that initiated the ScheduledJob

        :return: The scheduled_plan of this ScheduledJob.
        :rtype: ScheduledPlan
        """
        return self._scheduled_plan

    @scheduled_plan.setter
    def scheduled_plan(self, scheduled_plan):
        """
        Sets the scheduled_plan of this ScheduledJob.
        ScheduledPlan that initiated the ScheduledJob

        :param scheduled_plan: The scheduled_plan of this ScheduledJob.
        :type: ScheduledPlan
        """
        
        self._scheduled_plan = scheduled_plan

    @property
    def runtime(self):
        """
        Gets the runtime of this ScheduledJob.
        Runtime in seconds

        :return: The runtime of this ScheduledJob.
        :rtype: int
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """
        Sets the runtime of this ScheduledJob.
        Runtime in seconds

        :param runtime: The runtime of this ScheduledJob.
        :type: int
        """
        
        self._runtime = runtime

    @property
    def looker_url(self):
        """
        Gets the looker_url of this ScheduledJob.
        Url for the scheduled entity

        :return: The looker_url of this ScheduledJob.
        :rtype: str
        """
        return self._looker_url

    @looker_url.setter
    def looker_url(self, looker_url):
        """
        Sets the looker_url of this ScheduledJob.
        Url for the scheduled entity

        :param looker_url: The looker_url of this ScheduledJob.
        :type: str
        """
        
        self._looker_url = looker_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

