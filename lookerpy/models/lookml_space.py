# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class LookmlSpace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LookmlSpace - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'creator_id': 'int',
            'name': 'str',
            'is_personal': 'bool',
            'dashboards': 'list[DashboardBase]'
        }

        self.attribute_map = {
            'id': 'id',
            'creator_id': 'creator_id',
            'name': 'name',
            'is_personal': 'is_personal',
            'dashboards': 'dashboards'
        }

        self._id = None
        self._creator_id = None
        self._name = None
        self._is_personal = None
        self._dashboards = None

    @property
    def id(self):
        """
        Gets the id of this LookmlSpace.
        Unique Id

        :return: The id of this LookmlSpace.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LookmlSpace.
        Unique Id

        :param id: The id of this LookmlSpace.
        :type: int
        """
        
        self._id = id

    @property
    def creator_id(self):
        """
        Gets the creator_id of this LookmlSpace.
        User Id of Creator

        :return: The creator_id of this LookmlSpace.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this LookmlSpace.
        User Id of Creator

        :param creator_id: The creator_id of this LookmlSpace.
        :type: int
        """
        
        self._creator_id = creator_id

    @property
    def name(self):
        """
        Gets the name of this LookmlSpace.
        Unique Name

        :return: The name of this LookmlSpace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LookmlSpace.
        Unique Name

        :param name: The name of this LookmlSpace.
        :type: str
        """
        
        self._name = name

    @property
    def is_personal(self):
        """
        Gets the is_personal of this LookmlSpace.
        Space is a user's personal space

        :return: The is_personal of this LookmlSpace.
        :rtype: bool
        """
        return self._is_personal

    @is_personal.setter
    def is_personal(self, is_personal):
        """
        Sets the is_personal of this LookmlSpace.
        Space is a user's personal space

        :param is_personal: The is_personal of this LookmlSpace.
        :type: bool
        """
        
        self._is_personal = is_personal

    @property
    def dashboards(self):
        """
        Gets the dashboards of this LookmlSpace.
        Dashboards

        :return: The dashboards of this LookmlSpace.
        :rtype: list[DashboardBase]
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """
        Sets the dashboards of this LookmlSpace.
        Dashboards

        :param dashboards: The dashboards of this LookmlSpace.
        :type: list[DashboardBase]
        """
        
        self._dashboards = dashboards

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

